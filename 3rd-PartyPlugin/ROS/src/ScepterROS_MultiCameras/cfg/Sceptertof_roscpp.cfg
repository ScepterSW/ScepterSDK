#!/usr/bin/env python
PACKAGE = "scepter_param"

from dynamic_reconfigure.parameter_generator_catkin import *
 
gen = ParameterGenerator()

ActiveMode = gen.const("ActiveMode", int_t, 0, "ActiveMode")
HardwareTriggerMode = gen.const("HardwareTriggerMode", int_t, 1, "HardwareTriggerMode")
SoftwareTriggerMode = gen.const("SoftwareTriggerMode", int_t, 2, "SoftwareTriggerMode")
WorkMode = gen.enum([ActiveMode, HardwareTriggerMode,SoftwareTriggerMode],"WorkMode")

ColorResloution0 = gen.const("1600_1200", int_t, 0, "1600_1200")
ColorResloution1 = gen.const("800_600", int_t, 1, "800_600")
ColorResloution2 = gen.const("640_480", int_t, 2, "640_480")
ColorResloution = gen.enum([ColorResloution0, ColorResloution1,ColorResloution2],"ColorResloution")

NormalModel = gen.const("NormalModel", int_t, 0, "NormalModel")
HDRMode = gen.const("HDRMode", int_t, 1, "HDRMode")
WDRMode = gen.const("WDRMode", int_t, 2, "WDRMode")
XDRMode = gen.enum([NormalModel, HDRMode, WDRMode],"XDRMode")

group_tof = gen.add_group("Camera ToF", type="hide", state=True)
group_tof.add("FrameRate",int_t,0,"An Int Parameter",10,1,30)
group_tof.add("IRGMMGain",int_t,0,"An Int Parameter",50,0,255)
group_tof.add("ColorResloution", int_t, 0, "ColorResloution", 2, 0, 2,edit_method=ColorResloution)
group_tof.add("XDRMode", int_t, 0, "XDRMode", 0, 0, 2,edit_method=XDRMode)
group_tof.add("ToFManual",bool_t,0,"A Bool Parameter",True)
group_tof.add("ToFExposureTime",int_t,0,"An Int Parameter",1000,60,4000)
group_tof.add("ColorManual",bool_t,0,"A Bool Parameter",False)
group_tof.add("ColorExposureTime",int_t,0,"An Int Parameter",1000,100,30000)
group_tof.add("WorkMode", int_t, 0, "WorkMode", 0, 0, 2,edit_method=WorkMode)
group_tof.add("SoftwareTrigger",bool_t,0,"A Bool Parameter",False)
group_tof.add("DepthCloudPoint",bool_t,0,"A Bool Parameter",False)
group_tof.add("Depth2ColorCloudPoint",bool_t,0,"A Bool Parameter",False)

exit(gen.generate(PACKAGE,"scepter_manager","Sceptertof_roscpp"))   
